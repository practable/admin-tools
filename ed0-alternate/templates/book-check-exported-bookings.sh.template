#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 26 22:32:42 2023

@author: tim
"""
import datetime
import json
import pyrfc3339 as rfc3339
import yaml
   
def all_equal(iterator):
    iterator = iter(iterator)
    try:
        first = next(iterator)
    except StopIteration:
        return True
    return all(first == x for x in iterator)

yaml.add_representer(datetime.datetime, lambda self, data:
                     self.represent_scalar('tag:yaml.org,2002:str', data.replace(tzinfo=None).isoformat('T') +'Z'))  
    
with open("./data/exported_bookings.json") as file:
    eb = json.load(file)    
 
f = open("./data/booking-plan.yaml", "r")
document = f.read()
bp = yaml.safe_load(document)
windows = bp["windows"]  

users = {}

def a_inside_b(start_a, end_a, start_b, end_b):
  
    return start_a >= start_b and start_a <= end_b and end_a >= start_b and end_a <= end_b

def which_windows(windows, earliest, latest):
    inside = []
    for name in windows.keys():
        window = windows[name]
      
        if a_inside_b(earliest, latest, window["start"], window["end"]):
            inside.append(name)
    return inside        
    

for item in eb:
    if (item["policy"].startswith("p-engdes1-lab")):
        if ( not (item["user"] in users)):
            users[item["user"]] = {"bookings":[]}
        
        if ("cancelled" in item and item["cancelled"]):
            print("cancelled  %s %s\n",item["user"], item["slot"])
        users[item["user"]]["bookings"].append({
        "name": item["name"],
           "slot": item["slot"],
           "policy": item["policy"],
           "when": {
               "start": rfc3339.parse(item["when"]["start"]),
               "end": rfc3339.parse(item["when"]["end"]),
               }
        })
    
lengths = []

for user in users:
    lengths.append(len(users[user]["bookings"]))

if (not (all_equal(lengths) and lengths[0]==2)):
    print("inconsistent lengths")
    print(lengths)    




users_tmp = users

users_by_window = {}

for window in windows.keys():
    users_by_window[window] = {
        "users":{},
        "count":0,
        }

for name in users_tmp.keys():
    user = users_tmp[name]
    earliest = user["bookings"][0]["when"]["start"]
    latest = user["bookings"][0]["when"]["end"]
    
    for booking in user["bookings"]:
        if booking["when"]["start"] < earliest:
            earliest = booking["when"]["start"]
        if booking["when"]["end"] > latest:
            latest = booking["when"]["end"]           
    
    user["earliest"] = earliest
    user["latest"] = latest

    w = which_windows(windows, earliest, latest)
    if not len(w) == 1:
        print("user %s in %d windows %s"%(name, len(w), str(w)))
     
        user["windows"] = w    
    users_by_window[w[0]]["users"][name] = user
    users_by_window[w[0]]["count"] = users_by_window[w[0]]["count"] + 1
    users[name] = user    
    

    
with open(r'./data/checked_exported_bookings_by_window.yaml', 'w') as file:
    yaml.dump(users_by_window, file, default_flow_style=False)  

with open(r'./data/checked_exported_bookings.yaml', 'w') as file:
    yaml.dump(users, file, default_flow_style=False)   
